{"version":3,"sources":["components/Info/Info.jsx","components/Temperature/WeatherCard.jsx","components/SearchBar/SearchBar.jsx","components/Info/Error.jsx","components/Forecast/Forecast.jsx","api/index.js","App.js","index.js","App.module.css","components/Temperature/Cards.module.css"],"names":["FormatLoader","styled","CircularProgress","TransparentCard","Card","Info","data","useState","Date","time","setTime","useEffect","timeID","setInterval","tick","clearInterval","name","Typography","variant","toLocaleTimeString","getMonth","getDate","getFullYear","Math","round","parseFloat","main","temp","Grid","container","alignItems","justify","spacing","item","className","weather","id","description","charAt","toUpperCase","slice","SearchForm","form","showResult","TransparentPaper","Paper","useStyles","makeStyles","theme","root","padding","display","width","input","marginLeft","flex","iconButton","divider","height","margin","SearchBar","props","classes","cityName","setCityName","onSubmit","e","preventDefault","handleSubmit","component","InputBase","placeholder","inputProps","onChange","target","value","Divider","orientation","IconButton","type","aria-label","Error","CardContent","icon","faSadCry","LargeIcon","i","convertTemp","Forecast","console","log","daily","map","day","style","flexDirection","justifyContent","timestamp","date","weekday","Array","getDay","dt","min","max","url","API_KEY","fetchData","city","a","newURL","axios","get","fetchForecastData","lat","lon","App","cityData","setCityData","forecastData","setForecastData","cityResult","coord","forecastResult","fetchedData","cx","styles","overlay","cod","colorTheme","createMuiTheme","palette","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.3dee2ebc.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Typography, Card, Grid, CircularProgress } from '@material-ui/core';\nimport styled from 'styled-components';\nimport WeatherIcon from 'react-icons-weather';\nimport 'fontsource-roboto';\nimport '../../assets/css/weather-icons.min.css';\n\nconst FormatLoader = styled(CircularProgress)`\n  color: rgba(255, 255, 255, 1);\n  margin: 3em;\n`;\n\nconst TransparentCard = styled(Card)`\n  transition: 0.5s;\n  display: flex;\n  flex-direction: column;\n  background-color: rgba(0, 0, 0, 0.3);\n  width: 30vw;\n  align-items: center;\n  padding: 1em;\n  margin: 1em;\n  margin-top: 0em;\n`;\n\nconst Info = ({ data }) => {\n  const [time, setTime] = useState(new Date());\n\n  useEffect(() => {\n    let timeID = setInterval(() => tick(), 1000);\n    return function cleanup() {\n      clearInterval(timeID);\n    };\n  });\n\n  const tick = () => {\n    setTime(new Date());\n  };\n\n  if (!data.name) {\n    return <FormatLoader />;\n  } else {\n  }\n\n  return (\n    <TransparentCard>\n      <Typography variant='h6'>\n        {time.toLocaleTimeString() + ' '}\n        {time.getMonth() + '/' + time.getDate() + '/' + time.getFullYear()}\n      </Typography>\n      <Typography variant='h3'>{data.name}</Typography>\n      <Typography variant='h1'>\n        {Math.round(((parseFloat(data.main.temp) - 273.15) * 9) / 5 + 32) +\n          '\\u00B0' +\n          'F'}\n      </Typography>\n      <Grid container alignItems='center' justify='center' spacing={1}>\n        <Grid item>\n          <i className={`wi wi-owm-${data.weather[0].id}`}></i>\n        </Grid>\n        <Grid item>\n          <Typography>\n            {data.weather[0].description.charAt(0).toUpperCase() +\n              data.weather[0].description.slice(1)}\n          </Typography>\n        </Grid>\n      </Grid>\n    </TransparentCard>\n  );\n};\n\nexport default Info;\n","import React from 'react';\nimport { CardContent, Typography, Grid, Card } from '@material-ui/core';\nimport styled from 'styled-components';\n\nconst TransparentCard = styled(Card)`\n  background-color: rgba(255, 255, 255, 0.2);\n  alignitems: center;\n  justify-content: center;\n`;\n\nconst WeatherCard = props => {\n  return (\n    <Grid item xs={12} md={3} component={TransparentCard}>\n      <CardContent>\n        <Typography variant='h3'>Day</Typography>\n      </CardContent>\n    </Grid>\n  );\n};\n\nexport default WeatherCard;\n","import React, { useState } from 'react';\nimport { Paper, InputBase, Divider, IconButton } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { makeStyles } from '@material-ui/core/styles';\nimport styled from 'styled-components';\n\nconst SearchForm = styled.form`\n  top: ${({ showResult }) => (showResult ? '0%' : '30%')};\n  transition: 0.8s 0.5s;\n`;\n\nconst TransparentPaper = styled(Paper)`\n  background-color: rgba(0, 0, 0, 0.3);\n  margin: 2em;\n`;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: '2px 4px',\n    display: 'flex',\n    alignItems: 'center',\n    width: 400,\n  },\n  input: {\n    marginLeft: theme.spacing(1),\n    flex: 1,\n  },\n  iconButton: {\n    padding: 10,\n  },\n  divider: {\n    height: 28,\n    margin: 4,\n  },\n}));\n\nconst SearchBar = props => {\n  const classes = useStyles();\n\n  const [cityName, setCityName] = useState('');\n\n  const onSubmit = e => {\n    e.preventDefault();\n    props.handleSubmit(cityName);\n  };\n\n  return (\n    <SearchForm onSubmit={onSubmit}>\n      <TransparentPaper component='form' className={classes.root}>\n        <InputBase\n          className={classes.input}\n          placeholder='Search City'\n          inputProps={{ 'aria-label': 'search city' }}\n          onChange={e => setCityName(e.target.value)}\n        />\n        <Divider className={classes.divider} orientation='vertical' />\n        <IconButton\n          type='submit'\n          className={classes.iconButton}\n          aria-label='search'\n        >\n          <SearchIcon />\n        </IconButton>\n      </TransparentPaper>\n    </SearchForm>\n  );\n};\n\nexport default SearchBar;\n","import React from 'react';\nimport styled from 'styled-components';\nimport 'fontsource-roboto';\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport { faCoffee, faSadCry } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst TransparentCard = styled(Card)`\n  display: flex;\n  flex-direction: column;\n  background-color: rgba(0, 0, 0, 0.3);\n  width: 30vw;\n  align-items: center;\n  padding: 1em;\n  margin: 1em;\n`;\n\nconst Error = () => {\n  return (\n    <TransparentCard>\n      <CardContent>\n        <Grid container alignItems='center' justify='center' spacing={1}>\n          <Grid item>\n            <FontAwesomeIcon icon={faSadCry} />\n          </Grid>\n          <Grid item>\n            <Typography variant='h6'>\n              Sorry, please try another city!\n            </Typography>\n          </Grid>\n        </Grid>\n      </CardContent>\n    </TransparentCard>\n  );\n};\n\nexport default Error;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Card, Typography, Grid } from '@material-ui/core';\n\nconst TransparentCard = styled(Card)`\n  background-color: rgba(0, 0, 0, 0.3);\n  padding: 0.5em;\n  margin: 1em;\n  height: 30vh;\n  width: 10vw;\n`;\n\nconst LargeIcon = styled.i`\n  margin-top: 0.1em;\n  font-size: 5em;\n`;\n\nconst getDay = timestamp => {\n  let date = new Date(timestamp * 1000);\n  let weekday = new Array(7);\n  weekday[0] = 'Sunday';\n  weekday[1] = 'Monday';\n  weekday[2] = 'Tuesday';\n  weekday[3] = 'Wednesday';\n  weekday[4] = 'Thursday';\n  weekday[5] = 'Friday';\n  weekday[6] = 'Saturday';\n  return weekday[date.getDay()];\n};\n\nconst convertTemp = temp => {\n  return Math.round(((parseFloat(temp) - 273.15) * 9) / 5 + 32);\n};\n\nconst Forecast = ({ data }) => {\n  console.log(data);\n  if (!data.daily) {\n    return <div></div>;\n  }\n\n  return (\n    <Grid container alignItems='center' justify='center'>\n      {data.daily.map(day => {\n        return (\n          <Grid item>\n            <TransparentCard>\n              <div\n                style={{\n                  flexDirection: 'column',\n                  display: 'flex',\n                  justifyContent: 'center',\n                  alignItems: 'center',\n                }}\n              >\n                <Typography variant='h6'>{getDay(day.dt)}</Typography>\n                <Typography variant='h5'>\n                  {convertTemp(day.temp.min) +\n                    '\\u00B0' +\n                    'F' +\n                    ' \\u2758 ' +\n                    convertTemp(day.temp.max) +\n                    '\\u00B0' +\n                    'F'}\n                </Typography>\n                {/* <i\n                  className={`wi wi-owm-${day.weather[0].id}`}\n                  style={{ fontSize: 6 + 'em' }}\n                ></i> */}\n                <LargeIcon\n                  className={`wi wi-owm-${day.weather[0].id}`}\n                ></LargeIcon>\n              </div>\n            </TransparentCard>\n          </Grid>\n        );\n      })}\n    </Grid>\n  );\n};\n\nexport default Forecast;\n","import axios from 'axios';\n\nconst DEFAULT_URL_1 =\n  'https://api.openweathermap.org/data/2.5/weather?q=tokyo&appid=3155c804170271132c11d1db77cedef0';\nconst DEFAULT_URL_2 =\n  'https://api.openweathermap.org/data/2.5/onecall?lat=35.692&lon=139.69&%20exclude=current,hourly&appid=3155c804170271132c11d1db77cedef0';\nconst url = 'https://api.openweathermap.org/data/2.5/';\nconst API_KEY = '3155c804170271132c11d1db77cedef0';\n\nexport const fetchData = async city => {\n  let newURL = DEFAULT_URL_1;\n\n  if (city) {\n    newURL = `${url}weather?q=${city}&appid=${API_KEY}`;\n  }\n\n  try {\n    const { data } = await axios.get(newURL);\n\n    return { data };\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const fetchForecastData = async (lat, lon) => {\n  let newURL = DEFAULT_URL_2;\n\n  if (lat && lon) {\n    newURL = `${url}onecall?lat=${lat}&lon=${lon}&%20exclude=current,hourly&appid=${API_KEY}`;\n  }\n\n  try {\n    const { data } = await axios.get(newURL);\n\n    return { data };\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const fetchBackgroundPhot0 = async city => {};\n","import React, { useEffect, useState } from 'react';\nimport { Box, Card, Typography, Grid } from '@material-ui/core';\nimport styles from './App.module.css';\nimport cx from 'classnames';\nimport FadeIn from 'react-fade-in';\nimport Fade from '@material-ui/core/Fade';\nimport { Motion, spring } from 'react-motion';\n\nimport { Info, Cards, SearchBar, Error, Forecast } from './components';\nimport { fetchData, fetchForecastData } from './api';\nimport { faBookDead } from '@fortawesome/free-solid-svg-icons';\n\nconst App = () => {\n  const [cityData, setCityData] = useState({});\n  const [forecastData, setForecastData] = useState({});\n  const [cityName, setCityName] = useState('Tokyo');\n\n  const handleSubmit = city => {\n    setCityName(city);\n  };\n\n  useEffect(() => {\n    const fetchedData = async city => {\n      const cityResult = await fetchData(city);\n      const forecastResult = await fetchForecastData(\n        cityResult.data.coord.lat,\n        cityResult.data.coord.lon\n      );\n\n      setCityData(cityResult.data);\n      setForecastData(forecastResult.data);\n    };\n\n    fetchedData(cityName);\n  }, [cityName]);\n\n  return (\n    <div className={cx(styles.container, styles.overlay)}>\n      <div\n        style={{\n          flexDirection: 'column',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        <SearchBar handleSubmit={handleSubmit} />\n        <FadeIn>\n          {cityData && cityData.cod === 200 ? (\n            <Info data={cityData} />\n          ) : (\n            <Error />\n          )}\n        </FadeIn>\n        {cityData && cityData.cod === 200 ? (\n          <Forecast data={forecastData} />\n        ) : (\n          <div></div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'typeface-lato';\n\nimport App from './App';\nimport { ThemeProvider, createMuiTheme, CssBaseline } from '@material-ui/core';\n\nconst colorTheme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nReactDOM.render(\n  <ThemeProvider theme={colorTheme}>\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"overlay\":\"App_overlay__1bKt8\",\"container\":\"App_container__1MQN3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3P0ws\",\"card\":\"Cards_card__1CIg_\"};"],"sourceRoot":""}